[include led_progress.cfg]

[delayed_gcode startup]
initial_duration: 0.1
gcode:
  SET_SERVO SERVO=cleaner_servo ANGLE=30
  M300


[gcode_macro ERROR_HANDLER]
gcode:
  TURN_OFF_HEATERS
  SET_LED_TEMPLATE LED="bgr_neopixel" TEMPLATE=""
  SET_LED LED="bgr_neopixel" RED=1 GREEN=0 BLUE=0 SYNC=0 TRANSMIT=1
  M300
  G4 P500
  M300
  G4 P500
  M300
  G4 P500

[gcode_macro TEST_SILENT_MODE]
gcode:
    {% set currents = [1.2, 1.0, 0.8, 0.6, 0.4] %}
    {% set accel = 50000 %}
    {% set speed = 300 %}
    {% set dist = 150 %}
    M117 START SILENT TEST
    G90
    G1 X10 Y10 F6000
    {% for c in currents %}
      M117 Testing CURRENT={c}A
      SET_TMC_CURRENT STEPPER=stepper_x CURRENT={c}
      SET_TMC_CURRENT STEPPER=stepper_x1 CURRENT={c}
      SET_TMC_CURRENT STEPPER=stepper_y CURRENT={c}
      SET_TMC_CURRENT STEPPER=stepper_y1 CURRENT={c}
      SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}
      G4 P1000  
      G1 X{10 + dist} Y10 F{speed * 60}
      G1 X10 Y10 F{speed * 60}
      G1 X10 Y{10 + dist} F{speed * 60}
      G1 X10 Y10 F{speed * 60}
      G4 P1000
    {% endfor %}
    M117 SILENT TEST DONE

[gcode_macro TEST_MOVE]
gcode:
    {% set speed = params.S|float %}
    {% set accel = params.A|float %}
    {% set dist_x = params.X|float if 'X' in params else 180 %}
    {% set dist_y = params.Y|float if 'Y' in params else 180 %}
    {% if not 'x' in printer.toolhead.homed_axes or not 'y' in printer.toolhead.homed_axes %}
      M117 Homing X/Y
      G28 X Y
    {% endif %}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}
    M117 TEST_MOVE: S={speed} A={accel} DX={dist_x} DY={dist_y}
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel}
    G90
    G1 X10 Y10 F6000
    G1 X{10 + dist_x} Y{10 + dist_y} F{speed * 60}
    G1 X10 Y10 F{speed * 60}
    M117 TEST_MOVE DONE

[gcode_macro SILENT_MODE_ON]
gcode:
  _SILENT_MOTOR_ON M=stepper_x
  _SILENT_MOTOR_ON M=stepper_x1
  _SILENT_MOTOR_ON M=stepper_y
  _SILENT_MOTOR_ON M=stepper_y1
  SET_VELOCITY_LIMIT ACCEL=500 VELOCITY=200 SQUARE_CORNER_VELOCITY=1 
  SET_GCODE_VARIABLE MACRO=SILENT_STATE VARIABLE=enabled VALUE=1
  M117 Silent Mode ON

[gcode_macro SILENT_MODE_OFF]
gcode:
  _SILENT_MOTOR_OFF M=stepper_x
  _SILENT_MOTOR_OFF M=stepper_x1
  _SILENT_MOTOR_OFF M=stepper_y
  _SILENT_MOTOR_OFF M=stepper_y1
  SET_VELOCITY_LIMIT ACCEL=20000 VELOCITY=500 SQUARE_CORNER_VELOCITY=5
  SET_GCODE_VARIABLE MACRO=SILENT_STATE VARIABLE=enabled VALUE=0
  M117 Silent Mode OFF

[gcode_macro _SILENT_MOTOR_ON]
gcode:
  {% set motor = params.M|default("")|string %}
  SET_TMC_CURRENT STEPPER={motor} CURRENT=0.8
  SET_TMC_FIELD STEPPER={motor} FIELD=ihold VALUE=6  
  SET_TMC_FIELD STEPPER={motor} FIELD=tbl VALUE=1   
  SET_TMC_FIELD STEPPER={motor} FIELD=pwm_freq VALUE=0  
  SET_TMC_FIELD STEPPER={motor} FIELD=pwm_grad VALUE=5  
  SET_TMC_FIELD STEPPER={motor} FIELD=pwm_ofs VALUE=20  
  SET_TMC_FIELD STEPPER={motor} FIELD=en_spreadcycle VALUE=0

[gcode_macro _SILENT_MOTOR_OFF]
gcode:
  {% set motor = params.M|default("")|string %}
  {% set cfg = printer.configfile.settings %}
  {% set current_x = cfg["tmc2209 " + motor].run_current %}
  SET_TMC_FIELD STEPPER={motor} FIELD=tbl VALUE=2
  SET_TMC_FIELD STEPPER={motor} FIELD=pwm_freq VALUE=1
  SET_TMC_FIELD STEPPER={motor} FIELD=pwm_grad VALUE=14
  SET_TMC_FIELD STEPPER={motor} FIELD=pwm_ofs VALUE=36
  SET_TMC_FIELD STEPPER={motor} FIELD=en_spreadcycle VALUE=1


[gcode_macro SILENT_STATE]
variable_enabled: 0
gcode:
  ; pass


[gcode_macro M106]
rename_existing: M106.1
description: Override fan control with silent mode limit
gcode:
  {% set silent = printer["gcode_macro SILENT_STATE"].enabled|default(0)|int %}
  {% set requested_speed = params.S|default(255)|int %}
  {% if silent == 1 %}
    {% set max_speed = 128 %}
    {% if requested_speed > max_speed %}
      {% set speed = max_speed %}
    {% else %}
      {% set speed = requested_speed %}
    {% endif %}
  {% else %}
    {% set speed = requested_speed %}
  {% endif %}
  M106.1 S{speed}


[homing_override]
gcode: 
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
  TEMPERATURE_WAIT SENSOR=extruder MAXIMUM=150
  {% if printer.toolhead.homed_axes and 'z' in printer.toolhead.homed_axes %}
    {% set z_pos = printer.toolhead.position.z %}
    {% set z_max = printer.configfile.settings['stepper_z'].position_max|float %}
    {% if z_pos + 20 <= z_max %}
      G0 Z{z_pos + 20} F1200
    {% endif %}
  {% else %}
    # MOVE_DOWN
    M84
  {% endif %}
  SET_KINEMATIC_POSITION Z=0
  HI_ACCEL
  G28 X
  G28 Y
  G0 X105 Y105 F12000
  LOW_ACCEL
  G1 Z0.0125 # 1 microstep
  G4 P200
  G28 Z
  G0 Z10 F1200
  {% if printer.z_tilt.applied == 0 %}
    Z_TILT_ADJUST
    G0 X105 Y105 F12000
    G28 Z0
    G0 Z10 F1200
  {% endif %}
  HI_ACCEL
  G0 X0 Y0 Z20 F12000
axes: Z


[gcode_macro LOW_ACCEL]
gcode:
  SET_VELOCITY_LIMIT ACCEL=300 VELOCITY=100
  

[gcode_macro HI_ACCEL]
gcode:
  SET_VELOCITY_LIMIT ACCEL=20000 VELOCITY=500


[gcode_macro M300]
description: Enables M300 commands 
gcode:
  {% if printer["gcode_macro SILENT_STATE"].enabled != 1 %}
    #use a default 1kHz tone if S is omitted
    {% set S = params.S|default(1000)|int %}
    #use a 10ms duration if P is omitted
    {% set P = params.P|default(10)|int %}
    SET_PIN PIN=beeper_pin VALUE=0.5 CYCLE_TIME={1.0/S if S > 0 else 1}
    G4 P{P}
    SET_PIN PIN=beeper_pin VALUE=0
  {% endif %}

###########################

[gcode_macro CLEAN_NOZZLE]
description: Nozzle cleaning with automatic heating and optional cooldown
gcode:
  # Macro parameters
  {% set target_temp = params.TEMP|default(260)|int %}
  {% set cooldown_temp = params.COOLDOWN|default(150)|int %}
  {% set do_cooldown = params.COOLDOWN is defined %}
  {% set move_speed = 300 * 60 %}  # 300 mm/s converted to mm/min
  {% set safe_height = 10.0 %}
  
  # Get current temperature and print status
  {% set current_temp = printer.extruder.temperature %}
  {% set current_target = printer.extruder.target %}
  {% set is_printing = printer.idle_timeout.state == "Printing" %}

  G90  # Absolute coordinates
    
  # Set high acceleration for quick cleaning
  HI_ACCEL
  
  # Heat nozzle 
  {action_respond_info("Heating nozzle to %d°C" % target_temp)}
  SET_HEATER_TEMPERATURE HEATER=extruder TARGET={target_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_temp}
  
  # Check axis initialization and position
  {% if printer.toolhead.homed_axes %}
    {% if 'z' in printer.toolhead.homed_axes %}
      # Z is homed - raise to safe height if below
      {% set z_pos = printer.toolhead.position.z %}
      {% if z_pos < safe_height %}
        {action_respond_info("Raising Z to safe height")}
        G0 Z{safe_height} F1200
      {% endif %}
    {% else %}
      # Z not homed - assume it's at 185mm and home XY
      {action_respond_info("Z not homed, homing XY axes")}
      G28 X Y
    {% endif %}
  {% else %}
    # No axes homed - home XY
    {action_respond_info("Axes not homed, homing XY axes")}
    G28 X Y
  {% endif %}
  
  # Main cleaning
  _NOZZLE_CLEANING_SEQUENCE
  
  # Cooldown procedure with periodic cleaning
  {% if do_cooldown %}
    {action_respond_info("Starting cooldown from %d°C to %d°C with periodic cleaning" % (target_temp, cooldown_temp))}
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
    
    # Create cooling steps every 30°C
    {% set temp_steps = [] %}
    {% for i in range((target_temp - cooldown_temp) // 30) %}
      {% set current_step = target_temp - (i + 1) * 30 %}
      {% if current_step > cooldown_temp %}
        {% set _ = temp_steps.append(current_step) %}
      {% endif %}
    {% endfor %}
        
    # Perform cleaning at each step
    {% for step_temp in temp_steps %}
      {% if printer["gcode_macro SILENT_STATE"].enabled != 1 %}
        # Position for cooling and turn on fan
        G0 X20 Y100 F{move_speed}
        M106 S255  # Turn on fan to 100%
        
        TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={step_temp}
        
        # Turn off fan and return for cleaning
        M106 S0
      {% else %}
        TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={step_temp}
      {% endif %}
      _NOZZLE_CLEANING_SEQUENCE
    {% endfor %}
  
    # Move away from fan position after cooling is complete
    G0 X0 Y5 F{move_speed}  # Move to brush position (safe position)
    {% else %}
      # # Extrude plastic before printing
      G1 E10 F1000
      G92 E0
      # _NOZZLE_CLEANING_SEQUENCE
  {% endif %}

[gcode_macro _NOZZLE_CLEANING_SEQUENCE]
description: Nozzle cleaning movement sequence
gcode:
  # Movement speed constant (inherited from parent macro or default)
  {% set move_speed = 300 * 60 %}  # 300 mm/s converted to mm/min  
  # Position over brush
  G0 X0 Y3 F{move_speed}
  # Deploy brush
  SET_SERVO SERVO=cleaner_servo ANGLE=90
  G4 P300  # Wait for brush deployment
  # Series of cleaning movements (5 passes)
  {% for i in range(5) %}
    G0 X50 F{move_speed}
    G0 X0 F{move_speed}
  {% endfor %}
  # Retract brush
  SET_SERVO SERVO=cleaner_servo ANGLE=30
  G4 P300  # Wait for brush retraction

###########################


######### for klipper screen ##############
  
[gcode_macro CLEAN]
gcode:
    CLEAN_NOZZLE TEMP=270 COOLDOWN=150
    
[gcode_macro UNLOAD]
gcode:
    _UNLOAD_FILAMENT U=60 T=260

[gcode_macro LOAD]
gcode:
    _LOAD_FILAMENT L=60 T=260


###########################################

[gcode_macro MOVE_DOWN]
gcode:
    # {% set driver_config = printer.configfile.settings['tmc2209 stepper_z'] %}
    # {% set z_bottom = printer.toolhead.axis_maximum.z|float %}
    # {% set LOW_CUR = 0.020 %}
    # {% set RUN_CUR = driver_config.run_current %}
    # {% set HOLD_CUR = driver_config.hold_current %}
    # SET_TMC_CURRENT STEPPER=stepper_z CURRENT={LOW_CUR} HOLDCURRENT={LOW_CUR}
    # SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={LOW_CUR} HOLDCURRENT={LOW_CUR}
    # SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={LOW_CUR} HOLDCURRENT={LOW_CUR}
    # # Pause to ensure driver stall flag is clear
    # G4 P2000
    # SET_KINEMATIC_POSITION Z=100
    # G0 Z{z_bottom} F6000
    M84
    # SET_TMC_CURRENT STEPPER=stepper_z CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}
    # SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}
    # SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={RUN_CUR} HOLDCURRENT={HOLD_CUR}
    # G4 P2000


[gcode_macro START_PRINT]
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(240)|float %}
    {% set bed_temp = params.BED_TEMP|default(60)|float %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}                  # set bed t℃
    NEOPIXEL_DISPLAY LED="bgr_neopixel" TYPE=bed_temp MODE=progress
    G28
    G90                                                                         # absolute positioning
    LOW_ACCEL
    BED_MESH_CALIBRATE
    HI_ACCEL
    G0 X10 Y10 F12000
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp-10}                     # wait until
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}               # set nozzle t℃
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}                    # wait until
    SET_LED_TEMPLATE LED="bgr_neopixel" TEMPLATE=""
    SET_LED LED="bgr_neopixel" RED=1 GREEN=1 BLUE=1 SYNC=0 TRANSMIT=1
    M300 
    CLEAN_NOZZLE TEMP={extruder_temp}
    M82                                                                         # absolute extrusion mode


[gcode_macro END_PRINT]
gcode:
    {% set z_bottom = printer.toolhead.axis_maximum.z|float %}
    TURN_OFF_HEATERS
    M107                                                                        # turn off fan
    G91                                                                         # relative positioning
    G1 E-3 F1500                                                                # retract
    G90                                                                         # absolute positioning
    PARK
    G0 Z{z_bottom} F12000
    M300
    CLEAN_NOZZLE COOLDOWN=150
    MOVE_DOWN
    M84                                                                         # turn off all motors
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0 
    SET_LED LED="bgr_neopixel" RED=0.4 GREEN=0.4 BLUE=0.4 SYNC=0 TRANSMIT=1
    LOW_ACCEL


[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    {% set z_bottom = printer.toolhead.axis_maximum.z|float %}
    {% set nozzle_temp = printer.extruder.temperature|float %}
    TURN_OFF_HEATERS
    M107                                                                        # turn off fan
    # PARK
    G0 Z{z_bottom} F6000
    {% if nozzle_temp > 150 %}
      CLEAN_NOZZLE COOLDOWN=150
    {% endif %}
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    CANCEL_PRINT_BASE
    MOVE_DOWN
    M84                                                                         # turn off all motors
    LOW_ACCEL
    

[gcode_macro PARK]
gcode:
    {% set x_park = params.X|default(0)|float %}
    {% set y_park = params.Y|default(0)|float %}
    {% set z_park = params.Z|default(-1)|float + printer.toolhead.position.z|float %}
    {% set x_max = printer.toolhead.axis_maximum.x|float %}
    {% set y_max = printer.toolhead.axis_maximum.y|float %}
    {% set z_max = printer.toolhead.axis_maximum.z|float %}
    {% if x_park > x_max %}
        {% set x_park = x_max %}
    {% endif %}
    {% if y_park > y_max %}
        {% set y_park = y_max %}
    {% endif %}
    {% if z_park > z_max %}
        {% set z_park = z_max %}
    {% endif %}
    SAVE_GCODE_STATE NAME=PARK_STATE
    G90                                                                         # absolute positioning
    G1 X{x_park} Y{y_park} F5000
    {% if z_park > 0 %}
      G1 Z{z_park} F1500
    {% endif %}
    RESTORE_GCODE_STATE name=PARK_STATE


 
# [gcode_macro PRIME_LINE]
# gcode:
#     {% set feedrate = params.F|default(50)|float * 60 %}
#     {% set length = 100.0 %}
#     {% set width = printer.configfile.settings.extruder.nozzle_diameter|float %}
#     {% set height = ( (width / 0.04)|int - (width / 0.04 / 4)|int )|float * 0.04 %}
#     {% set extrude = length * width * height / 1.6 %}
#     {% set random = (range(0, 10) | random) %}
#     M117 Prime Line
#     SAVE_GCODE_STATE NAME=PRIME_LINE_STATE
#     SET_IDLE_TIMEOUT TIMEOUT=7200
#     G0 Z5.0 F6000
#     {% set y_start = 10.0 %}
#     {% set x_start = (printer.toolhead.axis_maximum.x|float - length) / 2 %}
#     G0 X{x_start} Y{y_start} Z{height} F5000                                # move to start position
#     G91                                                                     # relative positioning
#     G1 E4 F{feedrate}                                                       # prime
#     G1 X{length} E{extrude} F{feedrate}                                     # draw the 1st line
#     G0 Y{width} F5000                                                       # move to the next line
#     G1 X-{length/2} E{extrude} F{feedrate}                                  # draw the 2nd line
#     RESTORE_GCODE_STATE NAME=PRIME_LINE_STATE

    
# [gcode_macro PAUSE]
# rename_existing: BASE_PAUSE
# gcode:
#     {% set E = printer["gcode_macro START_PRINT"].retract|float %}
#     SAVE_GCODE_STATE NAME=PAUSE_STATE
#     BASE_PAUSE
#     G91
#     G1 E-{E} F1500                                                              # retract
#     G90
#     PARK


# [gcode_macro RESUME]
# rename_existing: BASE_RESUME
# gcode:
#     {% set E = printer["gcode_macro START_PRINT"].retract|float %}
#     G91
#     G1 E{E} F1500                                                               # unretract
#     G90
#     RESTORE_GCODE_STATE NAME=PAUSE_STATE MOVE=1
#     BASE_RESUME


# [gcode_macro FILAMENT_CHANGE]
# gcode:
#     SAVE_GCODE_STATE NAME=FILAMENT_CHANGE_STATE
#     {% set timer = params.T|default(300)|float %}
#     {% set unload = params.U|default(100)|float %}
#     {% set load = params.L|default(100)|float %}
#     {% if printer.pause_resume.is_paused %}
#         M118 Already paused
#     {% else %}
#         {% if printer.toolhead.homed_axes != "xyz" %}
#             M118 Homing
#             G28                                                                 # home if not homed
#         {% else %}
#             M118 Pausing print
#             PAUSE
#         {% endif %}
#     {% endif %}
#     M118 Changing filament
#     SET_IDLE_TIMEOUT TIMEOUT=7200
#     FILAMENT_UNLOAD U={unload}
#     COUNTDOWN TIME={timer} MSG="Change filament! Time left: "
#     FILAMENT_LOAD L={load}
#     RESTORE_GCODE_STATE NAME=FILAMENT_CHANGE_STATE
#     {% if printer.pause_resume.is_paused %}
#         M118 Resuming print
#         RESUME
#     {% endif %}


[gcode_macro _LOAD_FILAMENT]
gcode:
    {% set load = params.L|default(50)|float * 0.5 %}
    {% set extruder_temp = params.T|default(220)|float %}
    SAVE_GCODE_STATE NAME=FILAMENT_LOAD_STATE
    LOW_TEMP_CHECK T={extruder_temp}
    M118 Loading filament
    M83                                                                         # relative extrusion
    G1 E{load} F1500                                                            # extrude fast
    G4 P1000                                                                    # wait 1 second
    G1 E{load} F200                                                             # extrude slow
    RESTORE_GCODE_STATE NAME=FILAMENT_LOAD_STATE
    M300
    # PLAY FILE="filament_loaded"


[gcode_macro _UNLOAD_FILAMENT]
gcode:
    {% set unload = params.U|default(50)|float %}
    {% set extruder_temp = params.T|default(230)|float %}
    SAVE_GCODE_STATE NAME=FILAMENT_UNLOAD_STATE
    LOW_TEMP_CHECK T={extruder_temp}
    M118 Unloading filament
    M83                                                                         # relative extrusion
    G1 E2  F200                                                                 # extrude a little
    G1 E-10  F200                                                               # retract a little
    G1 E-{unload} F1500                                                         # retract a lot
    RESTORE_GCODE_STATE NAME=FILAMENT_UNLOAD_STATE
    M300
    # PLAY FILE="filament_unloaded"


# [gcode_macro LOW_TEMP_CHECK]
# gcode:
#     {% set extruder_temp = params.T|default(240)|float %}
#     {% if printer.extruder.target > extruder_temp %}                            # if there is a setpoint for extruder
#         {% set extruder_temp = printer.extruder.target %}
#     {% endif %}
#     {% if printer.extruder.temperature < extruder_temp %}                       # heat to the target
#         M118 Heating to {extruder_temp}
#         SET_HEATER_TEMPERATURE HEATER=extruder TARGET={extruder_temp}
#         TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
#     {% endif %}


# [gcode_macro COUNTDOWN]
# gcode:
#     {% set timer = params.TIME|default(10)|int %}
#     {% set message = params.MSG|default("Time: ") %}
#     # countdown
#     {% if timer > 60 %}
#         {% for s in range(timer, 60, -10) %}
#             M118 {message} {s}s
#             G4 P10000                                                           # dwell 10 seconds
#         {% endfor %}
#         {% set timer = 60 %}
#     {% endif %}
#     {% if timer > 10 %}
#         {% for s in range(timer, 10, -5) %}
#             M118 {message} {s}s
#             G4 P5000                                                           # dwell 5 seconds
#         {% endfor %}
#         {% set timer = 10 %}
#     {% endif %}
#     {% if timer > 0 %}
#         {% for s in range(timer, 0, -1) %}
#             M118 {message} {s}s
#             G4 P1000                                                           # dwell 1 second
#         {% endfor %}
#     {% endif %}
#     BEEP

[gcode_macro DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}
    
